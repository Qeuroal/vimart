" 加载补全配置
"
" 补全方案
let g:completeScheme=get(g:, "completeScheme", 0)
if g:completeScheme == 1
    "{{{> qrl scheme
    " nop 按键
    imap <C-i> <C-N>
    nnoremap <leader>u <nop>
    nnoremap <leader>U <nop>
    nnoremap <leader>r <nop>
    nnoremap <leader>g <nop>
    nnoremap <leader>yt <nop>
    nnoremap <leader>yh <nop>
    "<}}}

elseif g:completeScheme == 2
    " source ~/.vimrc.cpt.config
    "{{{> ycm 配置
    "
    "{{{> python解释器
    " 如果不指定python解释器路径, ycm会自己搜索一个合适的 (与编译ycm时使用的python版本匹配)
    " let g:ycm_server_python_interpreter = '/usr/bin/python2.7'
    "<}}}

    "{{{> 配置.ycm_extra.conf
    " 默认配置文件路径
    let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
    " 打开vim时不再询问是否加载ycm_extra_conf.py配置
    let g:ycm_confirm_extra_conf = 0
    "<}}}

    "{{{> 代码检查警告
    let g:ycm_max_diagnostics_to_display = 0
    let g:ycm_enable_diagnostic_signs = 0
    let g:ycm_error_symbol = '✗'
    let g:ycm_warning_symbol = '✹'
    "<}}}

    "{{{> make YCM compatible with UltiSnips (using supertab)
    " 选取下一个候选项
    let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
    " 选取上一个候选项
    let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
    let g:SuperTabDefaultCompletionType = '<C-n>'
    "<}}}

    "{{{> complete配置
    let g:ycm_seed_identifiers_with_syntax = 1
    let g:ycm_complete_in_comments = 1
    let g:ycm_complete_in_strings = 1
    let g:ycm_collect_identifiers_from_tags_files = 1
    let g:ycm_semantic_triggers =  {
                \   'c' : [' ', '->', '.','re![_a-zA-z0-9]'],
                \   'objc' : [' ', '->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',
                \             're!\[.*\]\s'],
                \   'ocaml' : [' ', '.', '#'],
                \   'cpp,objcpp' : [' ', '->', '.', '::','re![_a-zA-Z0-9]'],
                \   'perl' : [' ', '->'],
                \   'php' : [' ', '->', '::'],
                \   'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : [' ', '.'],
                \   'ruby' : [' ', '.', '::'],
                \   'lua' : [' ', '.', ':'],
                \   'erlang' : [' ', ':'],
                \ }
    " 补全提示按键, <C-I>与tab缩进冲突
    " let g:ycm_key_invoke_completion = '<C-i>'
    " 补全提示所需最小字符数
    let g:ycm_min_num_of_chars_for_completion=1
    " turns on YCM's identifier completer
    let g:ycm_auto_trigger = 1
    " 设置completefunc函数, 使用 i_<C-X><C-U> 触发
    set completefunc=youcompleteme#CompleteFunc
    " 设置补全快捷键
    imap <C-i> <plug>(YCMComplete)
    " 函数签名切换
    imap <silent> <C-X>ys <Plug>(YCMToggleSignatureHelp)
    "<}}}

    "{{{> 按键映射
    " nnoremap <leader>u :YcmCompleter GoToDeclaration<cr>
    nnoremap gd :YcmCompleter GoToDefinition<cr>
    nnoremap gr :YcmCompleter GoToReferences<cr>
    nnoremap <leader>g :YcmCompleter GoTo<cr>
    " 在命令行栏显示函数原型
    nnoremap gy :YcmCompleter GetType<cr>
    " 开启/关闭是否再popup中显示函数文档
    nnoremap <silent> <leader>yh <plug>(YCMHover)
    "<}}}

    "{{{> 暂时停用的快捷键(不常用)
    " nnoremap <leader>ff :YcmCompleter FixIt<cr>
    " nmap <F5> :YcmDiags<cr>
    "<}}}

    "<}}}

elseif g:completeScheme == 3
    "{{{> coc 配置
    " https://raw.githubusercontent.com/neoclide/coc.nvim/master/coc-example.vim

    " May need for Vim (not Neovim) since coc.nvim calculates byte offset by count
    " utf-8 byte sequence
    set encoding=utf-8
    " Some servers have issues with backup files, see #649
    set nobackup
    set nowritebackup

    " Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
    " delays and poor user experience
    set updatetime=300

    " Always show the signcolumn, otherwise it would shift the text each time
    " diagnostics appear/become resolved
    set signcolumn=yes

    " Use tab for trigger completion with characters ahead and navigate
    " NOTE: There's always complete item selected by default, you may want to enable
    " no select by `"suggest.noselect": true` in your configuration file
    " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
    " other plugin before putting this into your config
    inoremap <silent><expr> <TAB>
                \ coc#pum#visible() ? coc#pum#next(1) :
                \ CheckBackspace() ? "\<Tab>" :
                \ coc#refresh()
    inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

    " Make <CR> to accept selected completion item or notify coc.nvim to format
    " <C-g>u breaks current undo, please make your own choice
    inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

    function! CheckBackspace() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> to trigger completion
    if has('nvim')
        inoremap <silent><expr> <c-i> coc#refresh()
    else
        inoremap <silent><expr> <c-i> coc#refresh()
    endif

    " Use `[g` and `]g` to navigate diagnostics
    " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " GoTo code navigation
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window
    nnoremap <silent> K :call ShowDocumentation()<CR>

    function! ShowDocumentation()
        if CocAction('hasProvider', 'hover')
            call CocActionAsync('doHover')
        else
            call feedkeys('K', 'in')
        endif
    endfunction

    " Highlight the symbol and its references when holding the cursor
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Symbol renaming
    nmap <leader>rn <Plug>(coc-rename)

    " Formatting selected code
    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
        autocmd!
        " Setup formatexpr specified filetype(s)
        autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
        " Update signature help on jump placeholder
        autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Applying code actions to the selected code block
    " Example: `<leader>aap` for current paragraph
    xmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap keys for applying code actions at the cursor position
    nmap <leader>ac  <Plug>(coc-codeaction-cursor)
    " Remap keys for apply code actions affect whole buffer
    nmap <leader>as  <Plug>(coc-codeaction-source)
    " Apply the most preferred quickfix action to fix diagnostic on the current line
    nmap <leader>qf  <Plug>(coc-fix-current)

    " Remap keys for applying refactor code actions
    nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
    xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
    nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

    " Run the Code Lens action on the current line
    nmap <leader>cl  <Plug>(coc-codelens-action)

    " Map function and class text objects
    " NOTE: Requires 'textDocument.documentSymbol' support from the language server
    xmap if <Plug>(coc-funcobj-i)
    omap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap af <Plug>(coc-funcobj-a)
    xmap ic <Plug>(coc-classobj-i)
    omap ic <Plug>(coc-classobj-i)
    xmap ac <Plug>(coc-classobj-a)
    omap ac <Plug>(coc-classobj-a)

    " Remap <C-f> and <C-b> to scroll float windows/popups
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"

    " Use CTRL-S for selections ranges
    " Requires 'textDocument/selectionRange' support of language server
    nmap <silent> <C-s> <Plug>(coc-range-select)
    xmap <silent> <C-s> <Plug>(coc-range-select)

    " Add `:Format` command to format current buffer
    command! -nargs=0 Format :call CocActionAsync('format')

    " Add `:Fold` command to fold current buffer
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " Add `:OR` command for organize imports of the current buffer
    command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

    " Add (Neo)Vim's native statusline support
    " NOTE: Please see `:h coc-status` for integrations with external plugins that
    " provide custom statusline: lightline.vim, vim-airline
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

    " " 按键与 easymotion 冲突
    " " Mappings for CoCList
    " " Show all diagnostics
    " nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
    " " Manage extensions
    " nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
    " " Show commands
    " nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
    " " Find symbol of current document
    " nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
    " " Search workspace symbols
    " nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
    " " Do default action for next item
    " nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
    " " Do default action for previous item
    " nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
    " " Resume latest coc list
    " nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

    "<}}}
endif

" 非coc补全方式配置
if (g:completeScheme != 3)
    " 设置触发
    let g:UltiSnipsExpandTrigger="<TAB>"
endif



