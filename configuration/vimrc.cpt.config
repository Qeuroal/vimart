" 加载补全配置
"
" 补全方案
let g:completeScheme=get(g:, "completeScheme", 0)
if (g:completeScheme == 1)
    "{{{> qrl scheme
    " nop 按键
    imap <C-i> <C-N>
    nnoremap <leader>u <nop>
    nnoremap <leader>U <nop>
    nnoremap <leader>r <nop>
    nnoremap <leader>g <nop>
    nnoremap <leader>yt <nop>
    nnoremap <leader>yh <nop>
    "<}}}

elseif (g:completeScheme == 2)
    " source ~/.vimrc.cpt.config
    "{{{> ycm 配置
    "
    "{{{> python解释器
    " 如果不指定python解释器路径, ycm会自己搜索一个合适的 (与编译ycm时使用的python版本匹配)
    " let g:ycm_server_python_interpreter = '/usr/bin/python2.7'
    "<}}}

    "{{{> 配置.ycm_extra.conf
    " 默认配置文件路径
    let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
    " 打开vim时不再询问是否加载ycm_extra_conf.py配置
    let g:ycm_confirm_extra_conf = 0
    "<}}}

    "{{{> 代码检查警告
    let g:ycm_max_diagnostics_to_display = 0
    let g:ycm_enable_diagnostic_signs = 0
    let g:ycm_error_symbol = '✗'
    let g:ycm_warning_symbol = '✹'
    "<}}}

    "{{{> make YCM compatible with UltiSnips (using supertab)
    " 选取下一个候选项
    let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
    " 选取上一个候选项
    let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
    let g:SuperTabDefaultCompletionType = '<C-n>'
    "<}}}

    "{{{> complete配置
    let g:ycm_seed_identifiers_with_syntax = 1
    let g:ycm_complete_in_comments = 1
    let g:ycm_complete_in_strings = 1
    let g:ycm_collect_identifiers_from_tags_files = 1
    let g:ycm_semantic_triggers =  {
                \   'c' : [' ', '->', '.','re![_a-zA-z0-9]'],
                \   'objc' : [' ', '->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',
                \             're!\[.*\]\s'],
                \   'ocaml' : [' ', '.', '#'],
                \   'cpp,objcpp' : [' ', '->', '.', '::','re![_a-zA-Z0-9]'],
                \   'perl' : [' ', '->'],
                \   'php' : [' ', '->', '::'],
                \   'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : [' ', '.'],
                \   'ruby' : [' ', '.', '::'],
                \   'lua' : [' ', '.', ':'],
                \   'erlang' : [' ', ':'],
                \ }
    " 补全提示按键, <C-I>与tab缩进冲突
    " let g:ycm_key_invoke_completion = '<C-i>'
    " 补全提示所需最小字符数
    let g:ycm_min_num_of_chars_for_completion=1
    " turns on YCM's identifier completer
    let g:ycm_auto_trigger = 1
    " 设置completefunc函数, 使用 i_<C-X><C-U> 触发
    set completefunc=youcompleteme#CompleteFunc
    " 设置补全快捷键
    imap <C-l> <plug>(YCMComplete)
    " 函数签名切换
    imap <silent> <C-X>ys <Plug>(YCMToggleSignatureHelp)
    "<}}}

    "{{{> 按键映射
    " nnoremap <leader>u :YcmCompleter GoToDeclaration<cr>
    nnoremap gd :YcmCompleter GoToDefinition<cr>
    nnoremap gr :YcmCompleter GoToReferences<cr>
    nnoremap <leader>g :YcmCompleter GoTo<cr>
    " 在命令行栏显示函数原型
    nnoremap gy :YcmCompleter GetType<cr>
    " 开启/关闭是否再popup中显示函数文档
    nnoremap <silent> <leader>yh <plug>(YCMHover)
    "<}}}

    "{{{> 暂时停用的快捷键(不常用)
    " nnoremap <leader>ff :YcmCompleter FixIt<cr>
    " nmap <F5> :YcmDiags<cr>
    "<}}}

    "<}}}

elseif (g:completeScheme == 3 && isdirectory(expand('~/.vim/plugged/coc.nvim')))
    "{{{> coc 配置
    inoremap <silent><expr> <TAB>
                \ coc#pum#visible() ? coc#_select_confirm() :
                \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
                \ CheckBackspace() ? "\<TAB>" :
                \ coc#refresh()

    function! CheckBackspace() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Make <CR> to accept selected completion item or notify coc.nvim to format
    " <C-g>u breaks current undo, please make your own choice
    inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
    imap <silent><expr> <c-l> coc#refresh()
    
    let g:coc_snippet_next = '<tab>'
    let g:coc_snippet_prev = '<s-tab>'

    " GoTo code navigation
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window
    nnoremap <silent> K :call ShowDocumentation()<CR>

    "<}}}
endif

" 非coc补全方式配置
if (g:completeScheme != 3)
    " 设置触发
    let g:UltiSnipsExpandTrigger="<TAB>"
endif



