tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
## 基础配置
# 开启 256 colors 支持
# set -g default-terminal "screen-256color"
set -g default-terminal "tmux-256color"

# 配置 Vim 颜色兼容
set-option -sa terminal-overrides ",xterm*:Tc"

# 前缀绑定(ctrl-q)
unbind C-b
set -g prefix C-q
bind C-q send-prefix

# renumber windows
set -g renumber-windows on

# 取消tmux的escape延迟
set -sg escape-time 1
# set -s escape-time 0

# 编码
# set-window-option -g utf8 on        #开启窗口的UTF-8支持

# 配色方案
_tmux_white=colour15
_tmux_black=colour232
_tmux_red=colour1
_tmux_purple=colour54
_tmux_grey_l=colour145
_tmux_grey_d=colour236
_tmux_blue=colour69
_tmux_blue_d=colour68
_tmux_green=colour28

# panes
set -g pane-active-border-style "fg=$_tmux_blue"
# 指定消息通知的前景、后景色
set -g message-style "fg=$_tmux_grey_l,bg=$_tmux_grey_d"
# set -g message-style "bg=colour232, fg=colour5"
set -g pane-border-style "fg=$_tmux_green"
set -g display-panes-colour "black"
set -g display-panes-active-colour "white"

set -g pane-border-status "off"
set -g pane-border-format "[#[fg=white]#{?pane_active,#[bold],} :#P: #T #[fg=default,nobold]]"

# Auto hide pane-border-status line when only one pane is displayed (see tmux/tmux#566)
set-hook -g 'after-new-session'  'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
set-hook -g 'after-new-window'   'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
set-hook -g 'after-kill-pane'    'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
set-hook -g 'pane-exited'        'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
set-hook -g 'after-split-window' 'run-shell -b "if [ \#{window_panes} -gt 1 ]; then tmux set pane-border-status top; fi"'

# Messages
set -g message-command-style "fg=$_tmux_grey_l,bg=$_tmux_grey_d"
set -g display-time 3000
# set -g display-time 5000

# focus events
set -g focus-events on

# increase history limit
set -g history-limit 65535
# set -g history-limit 30000

# remap next-layout for repeat
bind-key -r Space next-layout

# 状态栏
set -g visual-activity on

# # 窗口
# setw -g automatic-rename off
# set-option -g allow-rename off
# set-window-option -g window-style default
# set-window-option -g clock-mode-colour black
# set-window-option -g clock-mode-style 24
# # 非当前窗口有内容更新时在状态栏通知
# # setw -g monitor-activity on
# set-window-option -g monitor-activity on
# # 状态栏当前窗口名称的样式
# set-window-option -g window-status-current-style fg='#333333',bg="#ff9966"

# 设置窗口从 1 开始而不是默认的 0，这样就可以使用 1-9 来切换窗口了，0 离其它键太远了
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1

# 配置vim-tmux-navigator冲突
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"
bind -n C-h run "($is_vim && tmux send-keys C-h) || \
                 tmux select-pane -L"

bind -n C-j run "($is_vim && tmux send-keys C-j)  || \
                 ($is_fzf && tmux send-keys C-j) || \
                 tmux select-pane -D"

bind -n C-k run "($is_vim && tmux send-keys C-k) || \
                 ($is_fzf && tmux send-keys C-k)  || \
                 tmux select-pane -U"

bind -n C-l run "($is_vim && tmux send-keys C-l) || \
                 tmux select-pane -R"

# bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

# # vim-like movement
# unbind-key j
# bind-key j select-pane -D
# bind-key -r M-j resize-pane -D 5

# unbind-key k
# bind-key k select-pane -U
# bind-key -r M-k resize-pane -U 5

# unbind-key h
# bind-key h select-pane -L
# bind-key -r M-h resize-pane -L 5

# unbind-key l
# bind-key l select-pane -R
# bind-key -r M-l resize-pane -R 5

# ## keymapping
# # last window
# bind-key ` last-window

# # reload conf
# bind-key r source-file ~/.tmux.conf

# new session prompt key
bind-key e command-prompt -p "Create new session:" "new-session -s %1"

# new session with current window - new session starts with a new window at index 1, so we kill it after moving
bind-key E command-prompt -p "Move to new session:" "new-session -d -s %1; move-window -t %1; kill-window -t %1:1; switch-client -t %1"

# vi mode-keys
set-window-option -g mode-keys vi
bind-key -Tcopy-mode-vi 'v' send -X begin-selection
bind-key -Tcopy-mode-vi 'y' send -XR copy-selection
# bind-key -Tcopy-mode-vi 'V' send -X rectangle-toggle
# bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
# bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel
# unbind-key [
# bind-key Escape copy-mode
unbind-key p
unbind-key n
bind-key C-n next-window
bind-key C-p previous-window
bind-key p paste-buffer

# system clipboard using xclip
bind-key -Tcopy-mode-vi 'Y' send -XR copy-pipe "xclip -i -sel c"

# new window at default path (home)
bind C neww
# open new window and pane in path of current window
bind c neww -c "#{pane_current_path}"
# bind - split-window -c "#{pane_current_path}"
# bind = split-window -h -c "#{pane_current_path}"
# unbind the defaults
unbind %
unbind '"'
# 新建窗口时设置为当前目录
# bind '"' split-window -v -c "#{pane_current_path}"
# bind % split-window -h -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
# bind c new-window -c "#{pane_current_path}"

# Alt binding for rotate
bind C-r rotate-window

# set terminal window title to session name
set -g set-titles on
set -g set-titles-string "#h:#S"

# notifications and bells
set -g bell-action any
set -g visual-bell off
# # disable sound bell
# set -g bell-action none
# set -g visual-bell on

# custom layout shortcuts
bind-key V select-layout even-vertical
bind-key H select-layout even-horizontal

# toggle mouse mode
bind-key m set mouse
# 配置鼠标控制，可能需要 terminal 支持
# set -g mouse on

# toggle pane synchronisation mode
bind-key S setw synchronize-panes

# rebind session and window tree to disable preview
bind-key s choose-tree -s -Z
bind-key w choose-tree -w -Z

# Move current window position left/right
bind-key -r > swap-window -t :+1
bind-key -r < swap-window -t :-1

# Status line

## Variables
_tmux_status_bg="#{?pane_in_mode,$_tmux_blue_d,#{?pane_synchronized,${_tmux_purple},${_tmux_blue}}}"
_tmux_prefix_on="#[fg=$_tmux_white,bg=$_tmux_status_bg,bold] #{?client_prefix,=, } "

## Line definition
set -g status-justify "left"
set -g status "on"
set -g status-left-style "none"
set -g status-right-style "none"
set -g status-style "fg=$_tmux_grey_d,bg=$_tmux_black,none"
set -g status-right-length "100"
set -g status-left-length "100"
setw -g window-status-activity-style "fg=$_tmux_red,bg=$_tmux_black,none"
set -g status-left "${_tmux_prefix_on}#[fg=$_tmux_white,bg=$_tmux_status_bg,bold]Session:#[nobold] #S${_tmux_prefix_on}#[fg=$_tmux_grey_d,bg=$_tmux_black]"
set -g status-right "#[fg=$_tmux_white,bg=$_tmux_status_bg]${_tmux_prefix_on}#(whoami)\@#h${_tmux_prefix_on}"
# setw -g window-status-format "#[fg=$_tmux_white,bg=$_tmux_black] #{?window_last_flag,:, }#I#{?window_last_flag,:, }#[fg=$_tmux_grey_l,bg=$_tmux_black] #T #{?#{!=:#{window_panes},1},(#{window_panes}) ,}"
setw -g window-status-format "#[fg=$_tmux_white,bg=$_tmux_black] #{?window_last_flag,:, }#I#{?window_last_flag,:, }#[fg=$_tmux_grey_l,bg=$_tmux_black] #{pane_current_command} #{?#{!=:#{window_panes},1},(#{window_panes}) ,}"
# 状态栏当前窗口名称格式
# setw -g window-status-current-format "#[fg=$_tmux_white,bg=$_tmux_grey_d,bold] [#I] #T #{?#{!=:#{window_panes},1},(#{window_panes}) ,}#[fg=$_tmux_grey_l,bg=$_tmux_black]"
setw -g window-status-current-format "#[fg=$_tmux_white,bg=$_tmux_grey_d,bold] [#I] #(basename #{pane_current_path}) #{?#{!=:#{window_panes},1},(#{window_panes}) ,}#[fg=$_tmux_grey_l,bg=$_tmux_black]"
# 状态栏窗口名称之间的间隔
setw -g window-status-separator "┃"
# 状态栏刷新时间
set -g status-interval 1


# # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# # run '~/.tmux/plugins/tpm/tpm'

# # 插件，默认是从 GitHub 寻找对应 repo
# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-sensible'

# set -g @plugin 'catppuccin/tmux'
# set -g @plugin 'christoomey/vim-tmux-navigator'

# # 控制区管理插件
# set -g @plugin 'tmux-plugins/tmux-yank'

